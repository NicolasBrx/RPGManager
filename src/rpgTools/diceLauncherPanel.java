package rpgTools;

import java.util.Random;

/**
 *
 * @author nicolas
 */
public class diceLauncherPanel extends javax.swing.JPanel {

  /**
   * Creates new form diceLauncherPanel
   */
  public diceLauncherPanel() {
    initComponents();
    jtfDices.setText("");
    jbtnLaunch.setEnabled(false);
    jlblResult.setText("");
  }
  
  public void initWithGameType(GameType gt){
    switch(gt.getGame()){
      case "Feng Shui":
        jtfDices.setText("2D6");
        jtfDices.setEnabled(false);
        jbtnLaunch.setEnabled(true);
        break;
        
      case "Patient 13":
        jtfDices.setText("3D6");
        jtfDices.setEnabled(false);
        jbtnLaunch.setEnabled(true);
        break;
        
      default:
        // nothing to init, dice launch choice is far too wide for the other
        // games.... 
        break;
      
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jtfDices = new javax.swing.JTextField();
    jlblResult = new javax.swing.JLabel();
    jbtnLaunch = new javax.swing.JButton();
    jSeparator1 = new javax.swing.JSeparator();
    jLabel2 = new javax.swing.JLabel();

    setMaximumSize(new java.awt.Dimension(352, 48));
    setMinimumSize(new java.awt.Dimension(352, 48));
    setName(""); // NOI18N

    jLabel1.setText("Input:");

    jtfDices.setText("jTextField1");
    jtfDices.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        jtfDicesFocusLost(evt);
      }
    });
    jtfDices.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jtfDicesActionPerformed(evt);
      }
    });
    jtfDices.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        jtfDicesKeyPressed(evt);
      }
      public void keyReleased(java.awt.event.KeyEvent evt) {
        jtfDicesKeyReleased(evt);
      }
    });

    jlblResult.setText("jLabel2");

    jbtnLaunch.setText("launch");
    jbtnLaunch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbtnLaunchActionPerformed(evt);
      }
    });

    jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

    jLabel2.setText("Results:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jtfDices, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jbtnLaunch, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jlblResult)
        .addContainerGap(362, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel1)
            .addComponent(jtfDices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jbtnLaunch)
            .addComponent(jLabel2)
            .addComponent(jlblResult)))
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jbtnLaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLaunchActionPerformed
    launchDices();
  }//GEN-LAST:event_jbtnLaunchActionPerformed

  private void jtfDicesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfDicesFocusLost
    if(!jtfDices.getText().equalsIgnoreCase("")){
      jbtnLaunch.setEnabled(true);
    }
    else{
      jbtnLaunch.setEnabled(false);
    }
  }//GEN-LAST:event_jtfDicesFocusLost

  private void jtfDicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfDicesActionPerformed
    launchDices();
  }//GEN-LAST:event_jtfDicesActionPerformed

  private void jtfDicesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfDicesKeyPressed
    if(!jtfDices.getText().equalsIgnoreCase("")){
      jbtnLaunch.setEnabled(true);
    }
    else{
      jbtnLaunch.setEnabled(false);
    }
  }//GEN-LAST:event_jtfDicesKeyPressed

  private void jtfDicesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfDicesKeyReleased
    if(!jtfDices.getText().equalsIgnoreCase("")){
      jbtnLaunch.setEnabled(true);
    }
    else{
      jbtnLaunch.setEnabled(false);
    }
  }//GEN-LAST:event_jtfDicesKeyReleased

  /**
   * 
   */
  private void launchDices(){
    Random rand = new Random();
    String[] parts = jtfDices.getText().split("D|d");
    if(parts.length != 2){
      jlblResult.setText("Invalid syntax.");
    }
    else{
      String result = "";
      for(int i = 0 ; i < Integer.parseInt(parts[0]) ; i++){
        result += (rand.nextInt(Integer.parseInt(parts[1]))) + 1;
        if(i < Integer.parseInt(parts[0]) - 1){
          result += " - ";
        }
      }
      //TODO: add results according to gameType
      jlblResult.setText(result);
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JButton jbtnLaunch;
  private javax.swing.JLabel jlblResult;
  private javax.swing.JTextField jtfDices;
  // End of variables declaration//GEN-END:variables
}
