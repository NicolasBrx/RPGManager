package ihm_desktop.PATIENT;

import ihm_desktop.MainFrame;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import npc.P13_Patient;
import npc.P13_Supervisor;

/**
 *
 * @author nicolas
 */
public class P13_NPCPanel extends javax.swing.JPanel {
  
  private ArrayList<P13_Supervisor> supervisors = new ArrayList<>();
  private ArrayList<P13_Patient> patients = new ArrayList<>();
  private String lastNpcModified;

  /**
   * Creates new form P13_NPCPanel
   */
  public P13_NPCPanel() {
    initComponents();
    lastNpcModified = "";
  }
  
  /**
   * 
   * @param supervisors 
   */
  public void setSupervisors(ArrayList<P13_Supervisor> supervisors){
    this.supervisors.addAll(supervisors);
    DefaultListModel model = new DefaultListModel();
    for(P13_Supervisor supervisor : supervisors){
      model.addElement(supervisor.getName());
    }
    jlistSupervisors.setModel(model);
  }
  
  /**
   * 
   * @param patients 
   */
  public void setPatients(ArrayList<P13_Patient> patients){
    this.patients.addAll(patients);
    DefaultListModel model = new DefaultListModel();
    for(P13_Patient patient : patients){
      model.addElement(patient.getName());
    }
    jlistPatients.setModel(model);
  }
  
  public ArrayList<String> getNotes(String NPCName){
    ArrayList<String> toReturn = new ArrayList<>();
    
    boolean found = false;
    for(P13_Supervisor s : supervisors){
      if(!found && s.getName().equalsIgnoreCase(NPCName)){
        
        found = !found;
      }      
    }
    return toReturn;
  }
  
  /**
   * 
   * @return 
   */
  public ArrayList<P13_Supervisor> getSupervisors(){
    return this.supervisors;
  }
  
  /**
   * 
   * @return 
   */
  public ArrayList<P13_Patient> getPatients(){
    return this.patients;
  }
  
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    jlistSupervisors = new javax.swing.JList<>();
    jlblNameS = new javax.swing.JLabel();
    jlblOffice = new javax.swing.JLabel();
    jlblAlliesS = new javax.swing.JLabel();
    jlblEnnemiesS = new javax.swing.JLabel();
    jScrollPane3 = new javax.swing.JScrollPane();
    jlistPatients = new javax.swing.JList<>();
    jlblNameP = new javax.swing.JLabel();
    jlblRoom = new javax.swing.JLabel();
    jlblAlliesP = new javax.swing.JLabel();
    jlblEnnemiesP = new javax.swing.JLabel();
    jlblPatients = new javax.swing.JLabel();
    jlblSupervisor = new javax.swing.JLabel();
    jScrollPane5 = new javax.swing.JScrollPane();
    IntelS = new javax.swing.JTextArea();
    jScrollPane2 = new javax.swing.JScrollPane();
    IntelP = new javax.swing.JTextArea();
    jlblSecretS = new javax.swing.JLabel();
    jlblSecretP = new javax.swing.JLabel();

    setMaximumSize(new java.awt.Dimension(760, 470));
    setMinimumSize(new java.awt.Dimension(760, 470));
    setPreferredSize(new java.awt.Dimension(760, 470));

    jlistSupervisors.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jlistSupervisorsMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(jlistSupervisors);

    jlblNameS.setText("Name:");

    jlblOffice.setText("Office:");

    jlblAlliesS.setText("Allies:");

    jlblEnnemiesS.setText("Ennemies:");

    jlistPatients.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jlistPatientsMouseClicked(evt);
      }
    });
    jScrollPane3.setViewportView(jlistPatients);

    jlblNameP.setText("Name:");

    jlblRoom.setText("Room:");

    jlblAlliesP.setText("Allies:");

    jlblEnnemiesP.setText("Ennemies:");

    jlblPatients.setText("Patients:");

    jlblSupervisor.setText("Supervisor:");

    IntelS.setColumns(20);
    IntelS.setRows(5);
    IntelS.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        IntelSFocusLost(evt);
      }
    });
    IntelS.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        IntelSKeyTyped(evt);
      }
    });
    jScrollPane5.setViewportView(IntelS);

    IntelP.setColumns(20);
    IntelP.setRows(5);
    IntelP.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        IntelPFocusLost(evt);
      }
    });
    IntelP.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        IntelPKeyTyped(evt);
      }
    });
    jScrollPane2.setViewportView(IntelP);

    jlblSecretS.setText("Secret:");

    jlblSecretP.setText("Secret:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
            .addGroup(layout.createSequentialGroup()
              .addComponent(jlblNameS)
              .addGap(283, 283, 283)
              .addComponent(jlblOffice))
            .addGroup(layout.createSequentialGroup()
              .addComponent(jlblNameP)
              .addGap(171, 171, 171)
              .addComponent(jlblRoom)
              .addGap(106, 106, 106)
              .addComponent(jlblSupervisor))
            .addComponent(jlblAlliesS)
            .addComponent(jlblEnnemiesS)
            .addComponent(jlblAlliesP)
            .addComponent(jlblEnnemiesP)
            .addComponent(jlblPatients)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
            .addComponent(jScrollPane2))
          .addComponent(jlblSecretS)
          .addComponent(jlblSecretP))
        .addContainerGap(22, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jlblNameS)
              .addComponent(jlblOffice))
            .addGap(10, 10, 10)
            .addComponent(jlblPatients)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jlblAlliesS)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jlblEnnemiesS)
            .addGap(4, 4, 4)
            .addComponent(jlblSecretS)
            .addGap(133, 133, 133))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(14, 14, 14)))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jlblNameP)
              .addComponent(jlblRoom)
              .addComponent(jlblSupervisor))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jlblAlliesP)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jlblEnnemiesP)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jlblSecretP)
            .addGap(9, 9, 9)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(14, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jlistSupervisorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlistSupervisorsMouseClicked
    if(evt.getClickCount() == 2){
      int selectedItem = jlistSupervisors.getSelectedIndex();
      jlblNameS.setText("Name: " + supervisors.get(selectedItem).getName());
      jlblOffice.setText("Office: " + supervisors.get(selectedItem).getOffice());
      jlblSecretS.setText("Secret: " + supervisors.get(selectedItem).getSecret());
      String tmpPatient = "";
      for(String p : supervisors.get(selectedItem).getPatients()){
        tmpPatient += p;
        if(!p.equalsIgnoreCase(supervisors.get(selectedItem).getPatients().get(supervisors.get(selectedItem).getPatients().size() - 1))){
          tmpPatient +=", ";
        }
      }
      jlblPatients.setText("Patients: "+ tmpPatient);
      String tmpAllies = "";
      for(String a : supervisors.get(selectedItem).getAllies()){
        tmpAllies += a;
        if(!a.equalsIgnoreCase(supervisors.get(selectedItem).getAllies().get(supervisors.get(selectedItem).getAllies().size() - 1))){
          tmpAllies +=", ";
        }
      }
      jlblAlliesS.setText("Allies: " + tmpAllies);
      String tmpEnnemy = "";
      for(String e : supervisors.get(selectedItem).getEnnemies()){
        tmpEnnemy += e;
        if(!e.equalsIgnoreCase(supervisors.get(selectedItem).getEnnemies().get(supervisors.get(selectedItem).getEnnemies().size() - 1))){
          tmpEnnemy +=", ";
        }
      }
      jlblEnnemiesS.setText("Ennemies: " + tmpEnnemy);
      Document doc = IntelS.getDocument();
      try{
        doc.remove(0, doc.getLength());
      }
      catch(BadLocationException e){
        e.printStackTrace();
      }
      for(String s : supervisors.get(selectedItem).getNotes()){
        try{
          doc.insertString(doc.getLength(),s,null);
          doc.insertString(doc.getLength(),"\r\n",null);
        }
        catch(BadLocationException e){
          e.printStackTrace();
        }
      }
    } // if count == 2
  }//GEN-LAST:event_jlistSupervisorsMouseClicked

  private void jlistPatientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlistPatientsMouseClicked
    if(evt.getClickCount() == 2){
      int selectedItem = jlistPatients.getSelectedIndex();
      jlblNameP.setText("Name: " + patients.get(selectedItem).getName());
      jlblRoom.setText("Room: " + patients.get(selectedItem).getRoom());
      jlblSupervisor.setText("Supervisor: " + patients.get(selectedItem).getSupervisor());
      jlblSecretP.setText("Secret: " + patients.get(selectedItem).getSecret());
      String tmpAllies = "";
      for(String a : patients.get(selectedItem).getAllies()){
        tmpAllies += a;
        if(!a.equalsIgnoreCase(patients.get(selectedItem).getAllies().get(patients.get(selectedItem).getAllies().size() - 1))){
          tmpAllies +=", ";
        }
      }
      jlblAlliesP.setText("Allies: " + tmpAllies);
      String tmpEnnemy = "";
      for(String e : patients.get(selectedItem).getEnnemies()){
        tmpEnnemy += e;
        if(!e.equalsIgnoreCase(patients.get(selectedItem).getEnnemies().get(patients.get(selectedItem).getEnnemies().size() - 1))){
          tmpEnnemy +=", ";
        }
      }
      jlblEnnemiesP.setText("Ennemies: " + tmpEnnemy);
      Document doc = IntelP.getDocument();
      try{
        doc.remove(0, doc.getLength());
      }
      catch(BadLocationException e){
        e.printStackTrace();
      }
      for(String s : patients.get(selectedItem).getNotes()){
        try{
          doc.insertString(doc.getLength(),s,null);
          doc.insertString(doc.getLength(),"\r\n",null);
        }
        catch(BadLocationException e){
          e.printStackTrace();
        }
      }
    } // if count == 2
  }//GEN-LAST:event_jlistPatientsMouseClicked

  private void IntelSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IntelSKeyTyped
    this.lastNpcModified = jlistSupervisors.getSelectedValue();
    ((MainFrame)SwingUtilities.getWindowAncestor(IntelS.getParent())).setModification("npc");
  }//GEN-LAST:event_IntelSKeyTyped

  private void IntelPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IntelPKeyTyped
    this.lastNpcModified = jlistPatients.getSelectedValue();
    ((MainFrame)SwingUtilities.getWindowAncestor(IntelP.getParent())).setModification("npc");
  }//GEN-LAST:event_IntelPKeyTyped

  private void IntelSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IntelSFocusLost
    boolean found = false;
    for(P13_Supervisor s : supervisors){
      if(!found && s.getName().equalsIgnoreCase(this.lastNpcModified)){
        Document doc = IntelS.getDocument();
        try{
          String tmp = doc.getText(0,doc.getLength());
          String[] parts = tmp.split("\r\n");
          s.clearNotes();
          for(int i = 0 ; i < parts.length ; ++i){
            s.addNote(parts[i]);
          }
        }
        catch(BadLocationException e){
          e.printStackTrace();
        }
        this.lastNpcModified = "";
        found = !found;
      }
    }
  }//GEN-LAST:event_IntelSFocusLost

  private void IntelPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IntelPFocusLost
    boolean found = false;
    for(P13_Patient p : patients){
      if(!found && p.getName().equalsIgnoreCase(this.lastNpcModified)){
        Document doc = IntelP.getDocument();
        try{
          String tmp = doc.getText(0,doc.getLength());
          String[] parts = tmp.split("\r\n");
          p.clearNotes();
          for(int i = 0 ; i < parts.length ; ++i){
            p.addNote(parts[i]);
          }
        }
        catch(BadLocationException e){
          e.printStackTrace();
        }
        
        this.lastNpcModified = "";
        found = !found;
      }
    }
  }//GEN-LAST:event_IntelPFocusLost


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextArea IntelP;
  private javax.swing.JTextArea IntelS;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane5;
  private javax.swing.JLabel jlblAlliesP;
  private javax.swing.JLabel jlblAlliesS;
  private javax.swing.JLabel jlblEnnemiesP;
  private javax.swing.JLabel jlblEnnemiesS;
  private javax.swing.JLabel jlblNameP;
  private javax.swing.JLabel jlblNameS;
  private javax.swing.JLabel jlblOffice;
  private javax.swing.JLabel jlblPatients;
  private javax.swing.JLabel jlblRoom;
  private javax.swing.JLabel jlblSecretP;
  private javax.swing.JLabel jlblSecretS;
  private javax.swing.JLabel jlblSupervisor;
  private javax.swing.JList<String> jlistPatients;
  private javax.swing.JList<String> jlistSupervisors;
  // End of variables declaration//GEN-END:variables
}
