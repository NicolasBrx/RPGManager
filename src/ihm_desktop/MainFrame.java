package ihm_desktop;

import ihm_desktop.scenario.ScenarioPanel;
import ihm_desktop.PATIENT.P13_NPCPanel;
import ihm_desktop.PATIENT.P13_PCPanel;
import ihm_desktop.ADD.ADD_PCPanel;
import characters.DD_Character;
import characters.GenericCharacter;
import characters.P13_Character;
import ihm_desktop.scenario.ScenarioCreation;
import java.awt.GridLayout;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import npc.NonPlayerCharacter;
import npc.P13_Patient;
import npc.P13_Supervisor;
import rpgTools.GameType;
import xml.XMLParser;

/**
 *
 * @author Nicolas Brax
 */
public class MainFrame extends javax.swing.JFrame {
  
  private HashMap<String,GenericCharacter> players = new HashMap<>();
  private HashMap<String,JPanel> playerPanels = new HashMap<>();
  private JPanel npcPanel ;
  private ScenarioPanel scenarioPanel;
  private ScenarioCreation scenarioCreationPanel;
  private ArrayList<String> modificationOnPlayer = new ArrayList<>();
  private HashMap<String,ArrayList<NonPlayerCharacter>> npcList = new HashMap<>();
  private GameType gametype;

  /**
   * Creates new form MainFrame
   */
  public MainFrame() {
    
    initComponents();
    
    this.setTitle("RPGManager v.0.3.0");
    URL iconURL = getClass().getResource("favicon.png");
    ImageIcon icon = new ImageIcon(iconURL);
    this.setIconImage(icon.getImage());
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanelTop = new javax.swing.JPanel();
    jcbbGametype = new javax.swing.JComboBox<>();
    jLabel1 = new javax.swing.JLabel();
    jbtnLoad = new javax.swing.JButton();
    jbtnSave = new javax.swing.JButton();
    jMainTabbed = new javax.swing.JTabbedPane();
    jTabPlayers = new javax.swing.JPanel();
    jTabNPC = new javax.swing.JPanel();
    jTabScenario = new javax.swing.JPanel();
    diceLauncherPanel1 = new rpgTools.diceLauncherPanel();
    jMenu = new javax.swing.JMenuBar();
    jMenuFile = new javax.swing.JMenu();
    jMenuFileQuit = new javax.swing.JMenuItem();
    jMenuCharacter = new javax.swing.JMenu();
    jmenuCharacterCreation = new javax.swing.JMenuItem();
    jmenuCharacterLevling = new javax.swing.JMenuItem();
    jMenuScenario = new javax.swing.JMenu();
    jmenuScenarioCreation = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("RPGManager v.0.2.0");
    setMinimumSize(new java.awt.Dimension(800, 640));
    setName("mainFrame"); // NOI18N
    setResizable(false);

    jPanelTop.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

    jcbbGametype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AD&D", "Cthulhu", "Feng Shui", "Patient 13", "Shadowrun" }));
    jcbbGametype.setMaximumSize(new java.awt.Dimension(150, 150));
    jcbbGametype.setMinimumSize(new java.awt.Dimension(150, 150));

    jLabel1.setText("Choose game:");

    jbtnLoad.setText("Load Game Data");
    jbtnLoad.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbtnLoadActionPerformed(evt);
      }
    });

    jbtnSave.setText("Save Game Data");
    jbtnSave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbtnSaveActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanelTopLayout = new javax.swing.GroupLayout(jPanelTop);
    jPanelTop.setLayout(jPanelTopLayout);
    jPanelTopLayout.setHorizontalGroup(
      jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelTopLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addGap(4, 4, 4)
        .addComponent(jcbbGametype, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(33, 33, 33)
        .addComponent(jbtnLoad)
        .addGap(18, 18, 18)
        .addComponent(jbtnSave)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanelTopLayout.setVerticalGroup(
      jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelTopLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jcbbGametype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1)
          .addComponent(jbtnLoad)
          .addComponent(jbtnSave))
        .addContainerGap(16, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout jTabPlayersLayout = new javax.swing.GroupLayout(jTabPlayers);
    jTabPlayers.setLayout(jTabPlayersLayout);
    jTabPlayersLayout.setHorizontalGroup(
      jTabPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 771, Short.MAX_VALUE)
    );
    jTabPlayersLayout.setVerticalGroup(
      jTabPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 466, Short.MAX_VALUE)
    );

    jMainTabbed.addTab("Players", jTabPlayers);

    javax.swing.GroupLayout jTabNPCLayout = new javax.swing.GroupLayout(jTabNPC);
    jTabNPC.setLayout(jTabNPCLayout);
    jTabNPCLayout.setHorizontalGroup(
      jTabNPCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 771, Short.MAX_VALUE)
    );
    jTabNPCLayout.setVerticalGroup(
      jTabNPCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 466, Short.MAX_VALUE)
    );

    jMainTabbed.addTab("NPC", jTabNPC);

    javax.swing.GroupLayout jTabScenarioLayout = new javax.swing.GroupLayout(jTabScenario);
    jTabScenario.setLayout(jTabScenarioLayout);
    jTabScenarioLayout.setHorizontalGroup(
      jTabScenarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 771, Short.MAX_VALUE)
    );
    jTabScenarioLayout.setVerticalGroup(
      jTabScenarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 466, Short.MAX_VALUE)
    );

    jMainTabbed.addTab("Scenario", jTabScenario);

    jMenuFile.setText("File");

    jMenuFileQuit.setText("Quit");
    jMenuFileQuit.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jMenuFileQuitMouseClicked(evt);
      }
    });
    jMenuFileQuit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuFileQuitActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuFileQuit);

    jMenu.add(jMenuFile);

    jMenuCharacter.setText("Characters");

    jmenuCharacterCreation.setText("Creation");
    jmenuCharacterCreation.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jmenuCharacterCreationActionPerformed(evt);
      }
    });
    jMenuCharacter.add(jmenuCharacterCreation);

    jmenuCharacterLevling.setText("Leveling");
    jmenuCharacterLevling.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jmenuCharacterLevlingActionPerformed(evt);
      }
    });
    jMenuCharacter.add(jmenuCharacterLevling);

    jMenu.add(jMenuCharacter);

    jMenuScenario.setText("Scenario");

    jmenuScenarioCreation.setText("Creation");
    jmenuScenarioCreation.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jmenuScenarioCreationActionPerformed(evt);
      }
    });
    jMenuScenario.add(jmenuScenarioCreation);

    jMenu.add(jMenuScenario);

    setJMenuBar(jMenu);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jPanelTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jMainTabbed, javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(diceLauncherPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanelTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jMainTabbed)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(diceLauncherPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jMenuFileQuitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuFileQuitMouseClicked
    System.exit(0);
  }//GEN-LAST:event_jMenuFileQuitMouseClicked

  private void jMenuFileQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileQuitActionPerformed
    System.exit(0);
  }//GEN-LAST:event_jMenuFileQuitActionPerformed

  private void jbtnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLoadActionPerformed
    
    //TODO: fixer les tailles des labels pour qu'ils ne se redimensionnent pas 
    //      en fonction de ce qu'il y a dedans => ca casse tout le reste
    
    XMLParser xml = new XMLParser();

    switch(jcbbGametype.getSelectedItem().toString()){
      case "AD&D":
        this.gametype = new GameType(jcbbGametype.getSelectedItem().toString());
        ArrayList<GenericCharacter> tmpPlayers_ADD = xml.loadCharacters(System.getProperty("user.dir") 
                                                   + "/data/player_characters/" 
                                                   + "add.xml",this.gametype);
        for (GenericCharacter player : tmpPlayers_ADD) {
          players.put(player.getPlayerName(),player);
          playerPanels.put(player.getPlayerName(),new ADD_PCPanel());
          ((ADD_PCPanel)playerPanels.get(player.getPlayerName())).setCharacter((DD_Character)players.get(player.getPlayerName()));
          
        }//for number of players
        
        break;
        
      case "Cthulhu":
        this.gametype = new GameType(jcbbGametype.getSelectedItem().toString());
        System.err.println("ERREUR!!");
        System.exit(9);
        break;
        
      case "Feng Shui":
        this.gametype = new GameType(jcbbGametype.getSelectedItem().toString());
        this.diceLauncherPanel1.initWithGameType(new GameType(jcbbGametype.getSelectedItem().toString()));
        System.err.println("ERREUR!!");
        System.exit(9);
        break;
        
      case "Patient 13":
        this.gametype = new GameType(jcbbGametype.getSelectedItem().toString());
        this.diceLauncherPanel1.initWithGameType(new GameType(jcbbGametype.getSelectedItem().toString()));
        ArrayList<GenericCharacter> tmpPlayers_P13 = xml.loadCharacters(System.getProperty("user.dir") 
                          + "/data/player_characters/" 
                          + "patient13.xml",this.gametype);
        for (GenericCharacter player : tmpPlayers_P13) {
          players.put(player.getPlayerName(),player);
          playerPanels.put(player.getPlayerName(),new P13_PCPanel());
          
          //generic
          ((P13_PCPanel)playerPanels.get(player.getPlayerName())).setGenerics(players.get(player.getPlayerName()).getPlayerName(),
                  players.get(player.getPlayerName()).getCharacterFirstname() + " " + players.get(player.getPlayerName()).getCharacterFamilyName(),
                  players.get(player.getPlayerName()).getCharacterAge(),
                  players.get(player.getPlayerName()).getCharacterWeight(),
                  players.get(player.getPlayerName()).getCharacterSize(),
                  players.get(player.getPlayerName()).isFemale());
          
          // specific
          ((P13_PCPanel)playerPanels.get(player.getPlayerName())).setSpecifics(
                  ((P13_Character)players.get(player.getPlayerName())).getSupervisor(),
                  ((P13_Character)players.get(player.getPlayerName())).getSurname(),
                  ((P13_Character)players.get(player.getPlayerName())).getRoom(),
                  ((P13_Character)players.get(player.getPlayerName())).getSeniority(),
                  players.get(player.getPlayerName()).getAttribute("vitality"),
                  players.get(player.getPlayerName()).getAttribute("lucidity"),
                  players.get(player.getPlayerName()).getAttribute("coldblood"),
                  ((P13_Character)players.get(player.getPlayerName())).getLineaments()
          );
        }//for number of players
        
        // load NPCs
        npcList = xml.loadNPC(System.getProperty("user.dir") 
                       + "/data/patient_13/" 
                       + "npc.xml",new GameType(jcbbGametype.getSelectedItem().toString()));
        ArrayList<P13_Supervisor> tmpSupervisors = new ArrayList<>();
        for(NonPlayerCharacter s : npcList.get("supervisors")){
          tmpSupervisors.add((P13_Supervisor)s);
        }
        ArrayList<P13_Patient> tmpPatients = new ArrayList<>();
        for(NonPlayerCharacter p : npcList.get("patients")){
          tmpPatients.add((P13_Patient)p);
        }
        npcPanel = new P13_NPCPanel();
        ((P13_NPCPanel)npcPanel).setSupervisors(tmpSupervisors);
        ((P13_NPCPanel)npcPanel).setPatients(tmpPatients);
        
        break;
        
      case "Shadowrun":
        this.gametype = new GameType(jcbbGametype.getSelectedItem().toString());
        System.err.println("ERREUR!!");
        System.exit(9);
        break;
        
      default:
        break;
    }
    
    jTabPlayers.setLayout(new GridLayout(1,playerPanels.size()));
    for(String key : playerPanels.keySet()){
      jTabPlayers.add(playerPanels.get(key));
    }
    jTabPlayers.revalidate();
    jTabPlayers.repaint();
    
    if(!npcList.isEmpty()){
      jTabNPC.setLayout(new GridLayout(1,1));
      jTabNPC.add(npcPanel);
      jTabNPC.repaint();
      jTabNPC.revalidate();
    }
    
    scenarioPanel = new ScenarioPanel();
    scenarioPanel.setGameType(this.gametype);
    jTabScenario.setLayout(new GridLayout(1,1));
    jTabScenario.add(scenarioPanel);
    jTabScenario.repaint();
    jTabScenario.revalidate();
    
    
  }//GEN-LAST:event_jbtnLoadActionPerformed

  /**
   * 
   * @param evt 
   */
  private void jbtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSaveActionPerformed
    XMLParser xml = new XMLParser();
    if(!this.modificationOnPlayer.isEmpty()){
      for(String player : players.keySet()){
        // save all players...
        switch(players.get(player).getGameType()){
          case "AD&D":
            break;
          
          case "Cthulhu":
            break;
            
          case "Feng Shui":
            break;
            
          case "Patient 13":
            players.get(player).addAttribute("vitality",((P13_PCPanel)playerPanels.get(player)).getVitality());
            players.get(player).addAttribute("lucidity",((P13_PCPanel)playerPanels.get(player)).getLucidity());
            players.get(player).addAttribute("coldblood",((P13_PCPanel)playerPanels.get(player)).getColdblood());
            ((P13_Character)players.get(player)).setSeniority(((P13_PCPanel)playerPanels.get(player)).getSeniority());
            break;
            
          case "Shadowrun":
            break;
            
          default:
            break;
        }//switch
      }
      ArrayList<GenericCharacter> toSave = new ArrayList<>();
      for(String player : players.keySet()){
        toSave.add(players.get(player));
      }
      xml.saveCharacters(toSave);
      jMainTabbed.setTitleAt(0, "Players");
      
    }
    if(jMainTabbed.getTitleAt(1).equalsIgnoreCase("*NPC")){
    
      switch(jcbbGametype.getSelectedItem().toString()){
        case "Patient 13":
          ArrayList<NonPlayerCharacter> toAddS = new ArrayList<>();
          toAddS.addAll(((P13_NPCPanel)npcPanel).getSupervisors());
          npcList.put("supervisors",toAddS);
          ArrayList<NonPlayerCharacter> toAddP = new ArrayList<>();
          toAddP.addAll(((P13_NPCPanel)npcPanel).getPatients());
          npcList.put("patients",toAddP);
          xml.saveNPC(npcList,new GameType(jcbbGametype.getSelectedItem().toString()));
          
          break;
          
        default:
          break;
      }
      jMainTabbed.setTitleAt(1, "NPC");
    }
  }//GEN-LAST:event_jbtnSaveActionPerformed

  private void jmenuCharacterCreationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuCharacterCreationActionPerformed
    System.out.println("Character Creation Menu Called.");
    jMainTabbed.setSelectedIndex(0);
    jMainTabbed.setEnabledAt(1, false);
    jMainTabbed.setEnabledAt(2, false);
    jbtnLoad.setEnabled(false);
    jbtnSave.setEnabled(false);
  }//GEN-LAST:event_jmenuCharacterCreationActionPerformed

  private void jmenuCharacterLevlingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuCharacterLevlingActionPerformed
    System.out.println("Character Leveling Menu Called.");
    jMainTabbed.setSelectedIndex(0);
    jMainTabbed.setEnabledAt(1, false);
    jMainTabbed.setEnabledAt(2, false);
    jbtnLoad.setEnabled(false);
    jbtnSave.setEnabled(false);
  }//GEN-LAST:event_jmenuCharacterLevlingActionPerformed

  private void jmenuScenarioCreationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuScenarioCreationActionPerformed
    System.out.println("Scenario Creation Menu Called.");
    jMainTabbed.setSelectedIndex(2);
    jMainTabbed.setEnabledAt(0, false);
    jMainTabbed.setEnabledAt(1, false);
    jbtnLoad.setEnabled(false);
    jbtnSave.setEnabled(false);
    
    scenarioCreationPanel = new ScenarioCreation();
    scenarioCreationPanel.setGameType(jcbbGametype.getSelectedItem().toString());
    jTabScenario.setLayout(new GridLayout(1,1));
    jTabScenario.add(scenarioCreationPanel);
    jTabScenario.repaint();
    jTabScenario.revalidate();
    
  }//GEN-LAST:event_jmenuScenarioCreationActionPerformed

  public void resetFrame(){
    jMainTabbed.setSelectedIndex(0);
    jMainTabbed.setEnabledAt(0,true);
    jMainTabbed.setEnabledAt(1,true);
    jMainTabbed.setEnabledAt(2,true);
    jbtnLoad.setEnabled(true);
    jbtnSave.setEnabled(true);
  }
  
  /**
   * 
   * @param modified 
   */
  public void setModification(String modified){
    if(modified.equalsIgnoreCase("npc")){
      jMainTabbed.setTitleAt(1,"*NPC") ;
    }
    else{
      if(!this.modificationOnPlayer.contains(modified)){
        this.modificationOnPlayer.add(modified);
      }
      jMainTabbed.setTitleAt(0, "*Players");
    }
  }
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new MainFrame().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private rpgTools.diceLauncherPanel diceLauncherPanel1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JTabbedPane jMainTabbed;
  private javax.swing.JMenuBar jMenu;
  private javax.swing.JMenu jMenuCharacter;
  private javax.swing.JMenu jMenuFile;
  private javax.swing.JMenuItem jMenuFileQuit;
  private javax.swing.JMenu jMenuScenario;
  private javax.swing.JPanel jPanelTop;
  private javax.swing.JPanel jTabNPC;
  private javax.swing.JPanel jTabPlayers;
  private javax.swing.JPanel jTabScenario;
  private javax.swing.JButton jbtnLoad;
  private javax.swing.JButton jbtnSave;
  private javax.swing.JComboBox<String> jcbbGametype;
  private javax.swing.JMenuItem jmenuCharacterCreation;
  private javax.swing.JMenuItem jmenuCharacterLevling;
  private javax.swing.JMenuItem jmenuScenarioCreation;
  // End of variables declaration//GEN-END:variables
}
